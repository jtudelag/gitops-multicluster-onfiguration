---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-secrets
  namespace: open-cluster-management-observability
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: job-generate-thanos-secret
  namespace: open-cluster-management-observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-secrets-sa
  namespace: open-cluster-management-observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: manage-secrets
subjects:
- kind: ServiceAccount
  name: job-generate-thanos-secret
  namespace: open-cluster-management-observability
---
apiVersion: batch/v1
kind: Job
metadata:
  name: job-generate-thanos-secret
  namespace: open-cluster-management-observability
spec:
  completions: 1
  parallelism: 1
  backoffLimit: 10
  activeDeadlineSeconds: 240
  template:
    spec:
      containers:
      - name: thanos-secret-creation
        image: registry.redhat.io/openshift4/ose-cli:v4.13
        imagePullPolicy: Always
        command:
          - /bin/bash
          - -c
          - |
            echo "Retrieving CM data"
            BUCKET_HOST=$(oc get -n open-cluster-management-observability configmap acm-observability-s3 -o jsonpath='{.data.BUCKET_HOST}')
            BUCKET_NAME=$(oc get -n open-cluster-management-observability configmap acm-observability-s3 -o jsonpath='{.data.BUCKET_NAME}')
            BUCKET_PORT=$(oc get -n open-cluster-management-observability configmap acm-observability-s3 -o jsonpath='{.data.BUCKET_PORT}')

            echo "Retrieving Secret data"
            ACCESS_KEY_ID=$(oc get -n open-cluster-management-observability secret acm-observability-s3 -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 -d)
            SECRET_ACCESS_KEY=$(oc get -n open-cluster-management-observability secret acm-observability-s3 -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 -d)

            cd /tmp/
            cat <<EOF > thanos-secret.yaml
            apiVersion: v1
            kind: Secret
            metadata:
              name: thanos-object-storage
              namespace: open-cluster-management-observability
            type: Opaque
            stringData:
              thanos.yaml: |
                type: s3
                config:
                  bucket: "${BUCKET_NAME}"
                  endpoint: "${BUCKET_HOST}:${BUCKET_PORT}"
                  insecure: false
                  access_key: "${ACCESS_KEY_ID}"
                  secret_key: "${SECRET_ACCESS_KEY}"
            EOF
            oc -n open-cluster-management-observability apply -f ./thanos-secret.yaml
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: job-generate-thanos-secret
      serviceAccountName: job-generate-thanos-secret
      terminationGracePeriodSeconds: 30
...
